---
/** NoteEditor: title input, content textarea with autosave, shows last saved time */
---
<section id="editor-root" class="editor">
  <div id="empty-guard" class="muted small" hidden>Select or create a note to begin.</div>

  <div class="bar">
    <div class="left">
      <input id="title" class="input title" placeholder="Untitled" aria-label="Note title" />
      <span id="status" class="muted small" aria-live="polite">Saved</span>
    </div>
    <div class="right">
      <button id="save" class="btn primary" type="button">Save</button>
      <button id="del" class="btn danger" type="button">Delete</button>
    </div>
  </div>
  <textarea id="content" class="textarea" placeholder="Start typing..." aria-label="Note content"></textarea>
</section>

<style>
  .editor { height: 100%; display: grid; grid-template-rows: auto 1fr; gap: .75rem; padding: 1rem; }
  .bar { display: flex; align-items: center; justify-content: space-between; gap: .8rem; }
  .left { display: flex; align-items: center; gap: .6rem; flex: 1; min-width: 0; }
  .title { font-size: 1.1rem; font-weight: 600; }
  .right { display: flex; gap: .5rem; }
</style>

<script is:inline>
  const NB = window.NoteBridge || {};
  const fetchNote = NB.fetchNote;
  const updateNote = NB.updateNote;
  const deleteNote = NB.deleteNote;
  const createNote = NB.createNote;
  const currentIdFromURL = NB.currentIdFromURL;
  const onURLChange = NB.onURLChange;
  const pushIdToURL = NB.pushIdToURL;
  const toast = NB.toast;
  const registerGlobalShortcuts = NB.registerGlobalShortcuts;

  const root = document.getElementById('editor-root');
  const title = document.getElementById('title');
  const content = document.getElementById('content');
  const status = document.getElementById('status');
  const saveBtn = document.getElementById('save');
  const delBtn = document.getElementById('del');
  const emptyGuard = document.getElementById('empty-guard');
  if (!root || !title || !content || !status || !saveBtn || !delBtn || !emptyGuard) {
    console.warn('NoteEditor: elements missing, hydration deferred.');
  }

  let currentId = currentIdFromURL ? currentIdFromURL() : null;
  let dirty = false;
  let saveTimer = null;

  function setStatus(text) {
    status.textContent = text;
  }
  function showEditor(show) {
    root.style.opacity = show ? '1' : '0.6';
    emptyGuard.hidden = show;
  }

  function load(id) {
    currentId = id;
    if (!id) {
      title.value = '';
      content.value = '';
      setStatus('No note selected');
      showEditor(false);
      return;
    }
    const n = fetchNote ? fetchNote(id) : null;
    if (!n) {
      setStatus('Note not found');
      showEditor(false);
      return;
    }
    showEditor(true);
    title.value = n.title;
    content.value = n.content;
    setStatus('Saved');
    dirty = false;
    title.focus();
  }

  function doSave() {
    if (!currentId || !updateNote) return;
    try {
      const updated = updateNote(currentId, {
        title: (title.value || 'Untitled').trim(),
        content: content.value,
      });
      if (updated) {
        setStatus('Saved');
        dirty = false;
      }
    } catch (e) {
      toast && toast('Failed to save (storage quota?)', 'error');
      setStatus('Error');
    }
  }

  function scheduleSave() {
    if (!currentId) return;
    setStatus('Savingâ€¦');
    dirty = true;
    if (saveTimer) window.clearTimeout(saveTimer);
    saveTimer = window.setTimeout(() => {
      doSave();
    }, 500);
  }

  title.addEventListener('input', scheduleSave);
  content.addEventListener('input', scheduleSave);

  saveBtn.addEventListener('click', () => {
    doSave();
    toast && toast('Saved');
  });

  delBtn.addEventListener('click', () => {
    if (!currentId || !deleteNote) return;
    if (confirm('Delete this note?')) {
      if (deleteNote(currentId)) {
        toast && toast('Note deleted');
        pushIdToURL && pushIdToURL(null);
        load(null);
      }
    }
  });

  // External events from Sidebar / Navbar
  window.addEventListener('editor:open', (e) => load(e.detail.id));
  window.addEventListener('editor:create', () => {
    const n = createNote ? createNote({ title: 'Untitled', content: '' }) : null;
    if (!n) return;
    pushIdToURL && pushIdToURL(n.id);
    load(n.id);
    title.focus();
    title.select();
  });
  window.addEventListener('editor:clear', () => load(null));

  // URL synchronization
  const off = onURLChange ? onURLChange(load) : () => {};

  // Keyboard shortcuts
  const offKeys = registerGlobalShortcuts
    ? registerGlobalShortcuts(
        () => { if (dirty) { doSave(); toast && toast('Saved'); } },
        () => { pushIdToURL && pushIdToURL(null); load(null); }
      )
    : () => {};

  // Initial load
  load(currentId);

  window.addEventListener('unload', () => {
    off && off();
    offKeys && offKeys();
  });
<!-- behavior provided by /js/editor.js -->
